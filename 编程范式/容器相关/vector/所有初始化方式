std::vector在C++中是一种非常有用的动态数组对象。有多种方式可以初始化std::vector。以下是一些常见的初始化方式：

默认初始化：创建一个空的std::vector对象。
std::vector<int> vec1;
使用列表初始化：在C++11及其后续版本中，可以使用初始化列表来初始化std::vector。
std::vector<int> vec2 = {1, 2, 3, 4, 5};
使用默认值初始化：创建一个特定大小的std::vector，并使用一个默认值来初始化所有的元素。
std::vector<int> vec3(5, 10); // 创建一个大小为5的vector，每个元素的值都是10
使用其他vector初始化：你可以使用一个已存在的vector来初始化一个新的vector。
std::vector<int> vec4(vec2); // 使用vec2来初始化vec4
使用迭代器初始化：你可以使用两个迭代器（一个起始迭代器和一个结束迭代器）来初始化一个新的vector，新的vector将包含起始迭代器和结束迭代器之间（包含起始迭代器，不包含结束迭代器）的所有元素。
std::vector<int> vec5(vec2.begin(), vec2.end()); // 使用vec2的迭代器来初始化vec5
使用assign函数初始化：你可以使用assign函数来初始化vector，assign函数接受两种类型的参数，一种是元素的数量和元素的值，另一种是两个迭代器。
std::vector<int> vec6;
vec6.assign(4, 100); // 使用assign函数初始化，创建一个大小为4的vector，每个元素的值都是100
vec6.assign(vec2.begin(), vec2.end()); // 使用assign函数和迭代器初始化，vec6中的元素与vec2一致