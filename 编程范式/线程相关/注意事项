std::thread并不线程安全

不要让可join的线程在对象销毁时仍然存在：如果std::thread对象在销毁时仍然是可join的，程序会终止。要确保在对象销毁前，调用join()或detach()。

注意异常安全：如果线程函数可能抛出异常，要确保在异常传递到线程之外之前，已经对其进行了处理。否则，程序会被std::terminate终止。

不要多次join或detach同一个线程：对同一个线程对象调用多次join或detach会导致程序错误。

注意线程的生命周期：线程的生命周期可能会超过创建它的对象或函数的生命周期。因此，如果线程访问的对象在线程结束前被销毁，就会产生未定义的行为。

传递参数给线程函数：向线程函数传递参数时，如果传递的是引用或指针，需要确保在线程生命周期内，这些引用或指针所指向的对象是有效的。
