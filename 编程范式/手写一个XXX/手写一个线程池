```
#include <queue>
#include <mutex>
#include <condition_variable>
#include <thread>
#include <atomic>     
   

class Task{
public:
    virtual void run(){
    }
};

class BlockedQueue{
public:
    BlockedQueue(int que_capacity) : _que_capacity(que_capacity) { }
    void push(Task* task){
        unique_lock<mutex> lck(_mtx);
        while(_que.size() >= _que_capacity) {
            _not_full.wait(lck);
        }

        _que.push(task);
        _not_empty.notify_one();
    }

    Task* pop() {
        unique_lock<mutex> lck(_mtx);
        while(_que.size() == 0) {
            _not_empty.wait(lck);
        }
        
        Task* task = _que.back();
        _que.pop();
        _not_full.notify_one();
        return task;
    }
private:
    queue<Task*> _que;
    int _que_capacity;
    mutex _mtx;
    condition_variable _not_empty;
    condition_variable _not_full;
};

void thread_func(BlockedQueue* task_queue, atomic<bool>* _should_stop_flag) {
    while(!_should_stop_flag) {
        Task* task = task_queue->pop();
        task->run();
        delete task;
    }
}

class ThreadPool {
public:
    ThreadPool(int thread_num, int task_que_capacity) {
        _task_que = new BlockedQueue(task_que_capacity);
        while(thread_num > 0) {
            thread t(thread_func, _task_que, &_should_stop_flag);
            _threads.push_back(t);
            thread_num--;
        }
    }

    ~ThreadPool() {
        _should_stop_flag = true;
        for(auto th : _threads) {
            th.join();
        }
        delete _task_que;
        _task_que = nullptr;
    }
    void add_task(Task* task) {
        _task_que->push(task);
    }


private:
    atomic<bool> _should_stop_flag = false;
    vector<thread> _threads;
    BlockedQueue* _task_que = nullptr;
};
```
