#include <mutex>
#include <condition_variable>

class BlockQueue{
    public:
        void push(int ele){
            std::unique_lock<std::mutex> lck(_mtx);
			while(size >= 100){ //这里循环检查是为了处理操作系统对线程的的虚假唤醒
				_not_full_cv.wait(lck);
			}

			_queue.push_back(ele);
			size++;
			//这里notify_one就可以, 可以理解为n个push和pop操作, 他们一定是串行执行的,无论是什么排列组合, 最终数据都会被正常消费
			_not_empty_cv.notify_one();
		}

		int pop(){
            std::unique_lock<std::mutex> lck(_mtx);
            while(_queue.empty()){ //这里循环检查是为了处理操作系统对线程的的虚假唤醒
                _not_empty_cv.wait(lck);
            }

			int ret = _queue.front();
			_queue.pop();
			//这里notify_one就可以, 可以理解为n个push和pop操作, 他们一定是串行执行的,无论是什么排列组合, 最终数据都会被正常消费
			_not_full_cv.notify_one();
			return ret;
		}

	private:
	    std::mutex _mtx;
		queue<int> _que;
		int max_size = 100;
		stdx::condition_variable _not_full_cv;
		stdx::condition_variable _not_empty_cv;
};
