#include <queue>
#include <mutex>
#include <condition_variable>

template <typename T>
class BlockingQueue {
private:
    std::queue<T> queue_;
    std::mutex mutex_;
    std::condition_variable condvar_;

public:
    BlockingQueue() {}

    void push(T const& value) {
        {
            std::unique_lock<std::mutex> lock(this->mutex_);
            queue_.push(value);
        }
        this->condvar_.notify_one();
    }

    T pop() {
        std::unique_lock<std::mutex> lock(this->mutex_);
        this->condvar_.wait(lock, [this]{ return !this->queue_.empty(); });
        T rc(std::move(this->queue_.front()));
        this->queue_.pop();
        return rc;
    }
};