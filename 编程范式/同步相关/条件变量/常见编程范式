在C++中，std::condition_variable是一种同步原语，可以用于在某些条件成立之前阻止线程继续执行。常见的编程范式包括：

生产者-消费者模型：
std::queue<int> data_queue;
std::mutex mtx;
std::condition_variable cond;

void producer(int id) {
    for (int i = 0; i < 10; ++i) {
        std::unique_lock<std::mutex> lock(mtx);
        data_queue.push(i);
        lock.unlock();
        cond.notify_one();
    }
}

void consumer() {
    while (true) {
        std::unique_lock<std::mutex> lock(mtx);
        cond.wait(lock, []{return !data_queue.empty();});
        int data = data_queue.front();
        data_queue.pop();
        lock.unlock();
        std::cout << "Consumer " << std::this_thread::get_id() << " got " << data << '\n';
    }
}
等待任务完成：
std::mutex mtx;
std::condition_variable cond;
bool ready = false;

void do_work() {
    std::unique_lock<std::mutex> lock(mtx);
    // do some work
    ready = true;
    lock.unlock();
    cond.notify_one();
}

void wait_for_work() {
    std::unique_lock<std::mutex> lock(mtx);
    cond.wait(lock, []{return ready;});
    // continue processing
}
等待多个线程完成任务：
std::mutex mtx;
std::condition_variable cond;
int ready = 0;

void do_work() {
    std::unique_lock<std::mutex> lock(mtx);
    // do some work
    ++ready;
    lock.unlock();
    cond.notify_one();
}

void wait_for_all() {
    std::unique_lock<std::mutex> lock(mtx);
    cond.wait(lock, []{return ready == NUM_THREADS;});
    // continue processing
}
在使用std::condition_variable时，一般需要配合std::mutex和std::unique_lock一起使用，以保证数据的同步和线程安全
